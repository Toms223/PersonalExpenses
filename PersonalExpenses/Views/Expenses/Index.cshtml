@using PersonalExpenses.Helpers.Expenses
@using PersonalExpenses.Model
@using PersonalExpenses.ViewModel
@model PersonalExpenses.ViewModel.ExpensesView
@{
Layout = "_Layout";
ViewData["Title"] = "My Expenses";
bool isDescending = Model.OrderBy == OrderBy.DateDescending;
OrderBy nextOrder = isDescending ? OrderBy.DateAscending : OrderBy.DateDescending;
}
@section Styles {
<style>
    :root{
        --bg:#0A0A0A;
        --fg:#ffffff;
        --fg-dim:rgba(255,255,255,.85);
        --glass:rgba(255,255,255,.05);
        --glass-strong:rgba(255,255,255,.08);
        --border:rgba(255,255,255,.12);
        --accent1:#0A84FF;
        --accent2:#BF5AF2;
        --danger:#FF3B30;
    }

    /* Page title */
    .page-title{
        text-align:center;
        font-size:2.5rem;
        margin: 0 0 0.75rem 0;
        background:linear-gradient(135deg,var(--accent1),var(--accent2));
        -webkit-background-clip:text;
        -webkit-text-fill-color:transparent;
    }

    /* Universal glass panel helpers (applied to specific areas below) */
    .panel{
        background:var(--glass);
        backdrop-filter:blur(20px);
        border:1px solid var(--border);
        border-radius:1rem;
        box-shadow:0 4px 30px rgba(0,0,0,.25);
    }

    /* Top controls (title + order) */
    .order-button{
        background:var(--glass);
        border:1px solid var(--border);
        border-radius:.6rem;
        padding:.4rem;
        margin-left:.5rem;
        display:inline-flex;
        align-items:center;
        justify-content:center;
        transition:background .2s ease, transform .2s ease, box-shadow .2s ease;
    }
    .order-button:hover{
        background:var(--glass-strong);
        transform:translateY(-1px);
        box-shadow:0 8px 20px rgba(10,132,255,.25);
    }
    .order-button svg{ width:24px; height:24px; fill:#fff; }

    /* Month navigation (Previous / Next) */
    .month-navigation{
        display:flex;
        gap:1rem; justify-content:center; margin-bottom:1rem;
    }
    .month-navigation a{
        display:inline-block;
        padding:.6rem 1.1rem;
        border-radius:.75rem;
        font-weight:600;
        color:#fff;
        background:linear-gradient(135deg,var(--accent1),var(--accent2));
        box-shadow:0 8px 20px rgba(10,132,255,.28);
        transition:transform .2s ease, box-shadow .2s ease, opacity .2s ease;
        text-decoration:none;
        border:none;
    }
    .month-navigation a:hover{
        transform:translateY(-2px);
        box-shadow:0 12px 28px rgba(10,132,255,.38);
    }

    /* Month filter (dropdowns) */
    .month-filter{
        display:flex;
        justify-content:center; margin-bottom:1rem;
    }
    .month-filter form{
        display:flex; gap:1rem; align-items:center; flex-wrap:wrap; justify-content:center;
        padding:1rem 1.25rem;
        max-width:900px;
        width:100%;
    }
    .month-filter label{
        font-weight:600; font-size:.95rem; color:var(--fg-dim);
    }
    .month-filter select{
        min-width:120px;
    }

    /* Date filters panel */
    .date-filters{
        display:flex;
        gap:1rem; justify-content:center; margin-bottom:1rem; flex-wrap:wrap;
        padding:1rem 1.25rem;
        max-width:1000px; margin-left:auto; margin-right:auto;
    }
    .date-filter-group{ display:flex; flex-direction:column; align-items:center;
    }
    .date-filter-group label{
        font-weight:600; margin-bottom:.25rem; font-size:.9rem; color:var(--fg-dim);
    }
    .filter-buttons {
        align-content: end;
    }

    /* Inputs (all) */
    .month-filter select,
    .month-filter input[type="number"],
    .date-filter-group input,
    .expense-form input[type="text"],
    .expense-form input[type="number"],
    .expense-form input[type="date"],
    .expense-list input[type="text"],
    .expense-list input[type="number"],
    .expense-list input[type="date"]{
        padding:.6rem .8rem;
        border:1px solid var(--border);
        border-radius:.75rem;
        font-size:.95rem;
        background:var(--glass-strong);
        color:var(--fg);
        outline:none;
        transition:border .2s ease, box-shadow .2s ease, background .2s ease;
    }
    .month-filter select:focus,
    .month-filter input[type="number"]:focus,
    .date-filter-group input:focus,
    .expense-form input:focus,
    .expense-list input:focus{
        border-color:var(--accent1);
        box-shadow:0 0 0 3px rgba(10,132,255,.25);
        background:rgba(255,255,255,.12);
    }

    /* Buttons */
    .apply-filter,
    .expense-form button:not(.delete),
    .expense-list button:not(.delete){
        padding:.6rem 1.1rem;
        border:none;
        border-radius:.75rem;
        font-weight:600;
        cursor:pointer;
        color:#fff;
        background:linear-gradient(135deg,var(--accent1),var(--accent2));
        box-shadow:0 8px 20px rgba(10,132,255,.28);
        transition:transform .2s ease, box-shadow .2s ease, opacity .2s ease;
    }
    .apply-filter:hover,
    .expense-form button:not(.delete):hover,
    .expense-list button:not(.delete):hover{
        transform:translateY(-2px);
        box-shadow:0 12px 28px rgba(10,132,255,.38);
    }

    .clear-filter{
        display:inline-block;
        padding:.55rem 1rem;
        border-radius:.75rem;
        color:#fff;
        background:var(--glass);
        border:1px solid var(--border);
        transition:transform .2s ease, background .2s ease;
        text-decoration:none;
    }
    .clear-filter:hover{ background:var(--glass-strong); transform:translateY(-1px);
    }

    /* Toggle switch (Apple-like) */
    .switch{ position:relative; display:inline-block; width:54px; height:30px; vertical-align:middle;
    }
    .switch input{ opacity:0; width:0; height:0; }
    .slider{
        position:absolute;
        inset:0;
        background:rgba(255,255,255,.2);
        border:1px solid var(--border);
        cursor:pointer; transition:.35s; border-radius:999px;
        box-shadow:inset 0 0 0 0 rgba(0,0,0,.1);
    }
    .slider::before{
        content:""; position:absolute; height:24px; width:24px; left:3px; bottom:3px;
        background:#fff; border-radius:50%;
        transition:.35s;
        box-shadow:0 2px 6px rgba(0,0,0,.35);
    }
    .switch input:checked + .slider{
        background:linear-gradient(135deg,var(--accent1),var(--accent2));
        box-shadow:inset 0 0 0 1px rgba(255,255,255,.15);
    }
    .switch input:checked + .slider::before{ transform:translateX(24px);
    }

    /* Expense form (both modes) */
    .expense-form{
        display:grid;
        grid-template-columns: 1fr 2fr;
        gap:1rem 1.25rem;
        align-items:center;
        margin: 1rem auto 2rem;
        padding:1.25rem;
        max-width:1000px;
    }

    .edit-form{
        display:grid;
        grid-template-columns: 1fr 2fr;
        gap:1rem 1.25rem;
        align-items:center;
        padding:1.25rem;
        max-width:1000px;
    }

    .expense-form > *:last-child {
        grid-column: span 2;
        /* make last item take full width */
    }
    .expense-form label{ font-weight:600; color:var(--fg-dim);
    }

    /* Expense list */
    ul.expense-list{ list-style:none; padding:0; margin:0; max-width:1000px; margin-left:auto; margin-right:auto;
    }
    ul.expense-list li{
        display:flex; flex-wrap:wrap; justify-content:space-between;
        gap:.75rem;
        padding:.9rem 1rem;
        margin-bottom:.6rem;
        border-radius:.9rem;
        background:var(--glass);
        border:1px solid var(--border);
        transition:transform .2s ease, background .2s ease;
        flex-direction: column;
    }
    ul.expense-list li:hover{ transform:translateY(-2px); background:var(--glass-strong);
    }
    ul.expense-list li span{ color:var(--fg-dim); }

    /* Monthly header */
    .monthly-expense-header{
        max-width:1000px;
        margin:1rem auto 1.25rem; padding:1rem 1.25rem;
    }
    .monthly-expense-header h2{
        margin:0 0 .25rem 0;
        background:linear-gradient(135deg,var(--accent1),var(--accent2));
        -webkit-background-clip:text; -webkit-text-fill-color:transparent;
    }
    .monthly-expense-header p{ margin:.15rem 0; color:var(--fg-dim);
    }

    /* View toggles & month controls containers */
    .view-toggle, .month-controls{
        display:flex;
        gap:1rem; justify-content:center; align-items:center;
        margin: .75rem auto 1rem; max-width:1000px;
    }

    /* Delete button */
    .delete{
        background:linear-gradient(135deg,var(--danger), #C62920);
        border-radius:2rem; border:none; padding:.45rem .8rem;
        font-size:.95rem; color:#fff; font-weight:700;
        cursor:pointer; transition:transform .2s ease, box-shadow .2s ease;
    }
    .delete:hover{ transform:translateY(-1px);
        box-shadow:0 8px 18px rgba(255,59,48,.35); }

    /* Animations (keep existing logic) */
    @@keyframes spin-down { from{transform:rotate(0deg);} to{transform:rotate(180deg);} }
    @@keyframes spin-up   { from{transform:rotate(180deg);} to{transform:rotate(0deg);} }
    .order-button.desc{ transform:rotate(180deg);
    }
    .order-button.spin{ animation:spin-up .5s ease; }
    .order-button.spin.desc{ animation:spin-down .5s ease;
    }

    /* Panels applied to groups */
    .date-filters, .month-filter form, .expense-form, .monthly-expense-header { composes: panel;
    } /* (if composes unsupported, we also set below) */
    /* Fallback when 'composes' isnâ€™t available */
    .date-filters, .month-filter form, .expense-form, .monthly-expense-header{
        background:var(--glass);
        backdrop-filter:blur(20px);
        border:1px solid var(--border);
        border-radius:1rem;
        box-shadow:0 4px 30px rgba(0,0,0,.25);
    }

    /* Responsive */
    @@media (max-width: 768px){
        .expense-form{ grid-template-columns: 1fr;
    }
        .month-filter form{ flex-direction:column; gap:.75rem;
    }
        .month-navigation{ flex-direction:column; align-items:center; gap:.5rem;
    }
    }
</style>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert-success" style="
         background: var(--glass-strong);
         border: 1px solid var(--accent1);
         padding: 0.75rem 1rem;
         border-radius: 0.75rem;
         margin: 1rem auto;
         max-width: 800px;
         text-align: center;
         font-weight: 600;
         color: var(--accent1);">
        @TempData["SuccessMessage"]
    </div>
}
<script>
    setTimeout(() => {
        const alert = document.querySelector('.alert-success');
        if (alert) alert.style.display = 'none';
    }, 4000); // hide after 4 seconds
</script>
<div style="display:flex; align-items:center; justify-content:center; margin-bottom:1rem;">
    <h1 class="page-title">My Expenses</h1>
    <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new {OrderBy = nextOrder})"
       class="order-button spin @(isDescending ? "desc" : "")" title="Toggle date order">
        <svg viewBox="0 0 24 24">
            <path d="M12 4l-8 8h16l-8-8z" />
        </svg>
    </a>
</div>

<form class="date-filters" method="get" asp-controller="Expenses" asp-action="Index">
    <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
    <input type="hidden" name="EditId" value="@Model.EditId"/>
    <input type="hidden" name="Offset" value="@Model.Offset"/>
    <input type="hidden" name="Limit" value="@Model.Limit"/>
    <div class="date-filter-group">
        <label for="StartDate">Start Date:</label>
        <input type="date" id="StartDate" name="StartDate" value="@(Model.StartDate?.ToString("yyyy-MM-dd"))" />
    </div>
    <div class="date-filter-group">
        <label for="EndDate">End Date:</label>
        <input type="date" id="EndDate" name="EndDate" value="@(Model.EndDate?.ToString("yyyy-MM-dd"))" />
    </div>

    <div class="filter-buttons">
        <button type="submit" class="apply-filter">Apply Filter</button>
        <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new { StartDate = (DateOnly?)null, EndDate = (DateOnly?)null })" class="clear-filter">Clear</a>
    </div>
</form>

<div class="view-toggle">
    <form method="get" action="/Expenses/Index" style="display:inline;">
        <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
        <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
        <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
        <input type="hidden" name="StartDate" value="@Model.StartDate" />
        <input type="hidden" name="EndDate" value="@Model.EndDate" />
        <input type="hidden" name="OrderBy" value="@Model.OrderBy" />
        <input type="hidden" name="Offset" value="@Model.Offset" />
        <input type="hidden" name="Limit" value="@Model.Limit" />
        <input type="hidden" name="EditId" value="@Model.EditId"/>
        <input type="hidden" name="ContinuousView" value="@(!Model.ContinuousView ? "true": "false")"/>
        <label class="switch">
            <input type="checkbox" onchange="this.form.submit()" @(Model.ContinuousView ? "checked" : "")>
            <span class="slider"></span>
        </label>
        <span>@(Model.ContinuousView ? "Continuous View" : "Fixed View")</span>
    </form>
</div>

@if (Model.ContinuousView)
{
<form class="expense-form" action="/Expenses/AddContinuousExpense" method="post">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="e.g. Coffee" required />
    <label for="amount">Amount:</label>
    <input type="number" id="amount" name="amount" step="0.01" placeholder="e.g. 3.50" required />
    <label for="date">Date:</label>
    <input type="date" id="date" name="date" required />
    <label for="amount">Period:</label>
    <input type="number" id="period" name="period" step="1" placeholder="e.g. 30" required />
    <label for="fixedExpense">Fixed:</label>
    <label class="switch">
        <input type="checkbox" id="fixedExpense" name="fixedExpense" value="true">
        <span class="slider"></span>
    </label>
    <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
    <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
    <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
    <input type="hidden" name="StartDate" value="@Model.StartDate" />
    <input type="hidden" name="EndDate" value="@Model.EndDate" />
    <input type="hidden" name="OrderBy" value="@Model.OrderBy" />
    <input type="hidden" name="Offset" value="@Model.Offset" />
    <input type="hidden" name="Limit" value="@Model.Limit" />
    <input type="hidden" name="EditId" value="@Model.EditId"/>
    <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
    <button class="submit" type="submit">Add Expense</button>
</form>
<ul class="expense-list">
    @foreach (var expense in Model.Expenses)
    {
    <li>
        @if (Model.EditId == expense.Id)
        {
        <form class="edit-form" action="/Expenses/EditContinuousExpense" method="post">
            <input type="hidden" name="Id" value="@expense.Id" />
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
            <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <input type="hidden" name="Offset" value="@Model.Offset"/>
            <input type="hidden" name="Limit" value="@Model.Limit"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate"/>
            <input type="hidden" name="EndDate" value="@Model.EndDate"/>
            <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
            <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            
            <label for="editDate-@expense.Id">Date:</label>
            <input type="date" id="editDate-@expense.Id" name="Date" value="@expense.Date.ToString("yyyy-MM-dd")" />
            
            <label for="editName-@expense.Id">Name:</label>
            <input type="text" id="editName-@expense.Id" name="Name" value="@expense.Name"/>
            
            <label for="editAmount-@expense.Id">Amount:</label>
            <input type="number" id="editAmount-@expense.Id" step="0.01" name="Amount" value="@expense.Amount" />
            
            <label for="editPeriod-@expense.Id">Period (days):</label>
            <input type="number" id="editPeriod-@expense.Id" step="1" name="Period" value="@expense.Period"/>
            
            <label for="editFixed-@expense.Id">Fixed:</label>
            <label class="switch">
                <input type="hidden" id="editFixedHidden-@expense.Id" name="fixedExpense" value="@(expense.Fixed.ToString().ToLower())">
                <input type="checkbox" id="editFixed-@expense.Id" @(expense.Fixed ? "checked" : "")
                       onchange="document.getElementById('editFixedHidden-@expense.Id').value = this.checked ? 'true' : 'false';">
                <span class="slider"></span>
            </label>

            <div style="grid-column: span 2; display:flex; justify-content: flex-end; gap:.5rem;">
                <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new { EditId = (Guid?)null })" class="clear-filter">Cancel</a>
                <button type="submit">Save</button>
            </div>
        </form>
        <form action="/Expenses/DeleteExpense" method="post">
            <input type="hidden" name="Id" value="@expense.Id" />
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
            <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <input type="hidden" name="Offset" value="@Model.Offset"/>
            <input type="hidden" name="Limit" value="@Model.Limit"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate"/>
            <input type="hidden" name="EndDate" value="@Model.EndDate"/>
            <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
            <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            <input type="hidden" name="Date" value="@expense.Date.ToString("yyyy-MM-dd")" />
            <input type="hidden" name="Name" value="@expense.Name"/>
            <input type="hidden" name="Amount" value="@expense.Amount" />
            <button class="delete" type="submit">Delete</button>
        </form>
        }
        else
        {
        if (expense.Continuous)
        {
        <span>@expense.Date.ToString("yyyy-MM-dd")</span>
        <span>@expense.Name</span>
        <span>@expense.Amount.ToString("C")</span>
        <span>@expense.Period - Days</span>
        <span>Next Payment: @expense.NextPayment()</span>
        <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new {EditId = expense.Id})" class="clear-filter">Edit</a>
        <form action="/Expenses/AddToCalender" method="post">
            <input type="hidden" name="Id" value="@expense.Id" />
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
            <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <input type="hidden" name="Offset" value="@Model.Offset"/>
            <input type="hidden" name="Limit" value="@Model.Limit"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate"/>
            <input type="hidden" name="EndDate" value="@Model.EndDate"/>
            <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
            <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            <input type="hidden" name="Date" value="@expense.Date.ToString("yyyy-MM-dd")" />
            <input type="hidden" name="Name" value="@expense.Name"/>
            <input type="hidden" name="Amount" value="@expense.Amount" />
            <button type="submit">Add to Outlook Calender</button>
        </form>
        }
        }
    </li>
    }
</ul>
}
else
{
<form class="expense-form" action="/Expenses/AddExpense" method="post">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="e.g. Coffee" required />
    <label for="amount">Amount:</label>
    <input type="number" id="amount" name="amount" step="0.01" placeholder="e.g. 3.50" required />
    <label for="date">Date:</label>
    <input type="date" id="date" name="date" required />
    <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
    <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
    <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
    <input type="hidden" name="StartDate" value="@Model.StartDate" />
    <input type="hidden" name="EndDate" value="@Model.EndDate" />
    <input type="hidden" name="OrderBy" value="@Model.OrderBy" />
    <input type="hidden" name="Offset" value="@Model.Offset" />
    <input type="hidden" name="Limit" value="@Model.Limit" />
    <input type="hidden" name="EditId" value="@Model.EditId"/>
    <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
    <button type="submit">Add Expense</button>
</form>

<div class="view-toggle">
    <form method="get" action="/Expenses/Index" style="display:inline;">
        <input type="hidden" name="MonthView" value="@(!Model.MonthView ? "true" : "false")" />
        <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
        <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
        <input type="hidden" name="StartDate" value="@Model.StartDate" />
        <input type="hidden" name="EndDate" value="@Model.EndDate" />
        <input type="hidden" name="OrderBy" value="@Model.OrderBy" />
        <input type="hidden" name="Offset" value="@Model.Offset" />
        <input type="hidden" name="Limit" value="@Model.Limit" />
        <input type="hidden" name="EditId" value="@Model.EditId"/>
        <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
        <label class="switch">
            <input type="checkbox" onchange="this.form.submit()" @(Model.MonthView ? "checked" : "")>
            <span class="slider"></span>
        </label>
        <span>@(Model.MonthView ? "Monthly View" : "All Expenses View")</span>
    </form>
</div>

@if (!Model.MonthView)
{
<ul class="expense-list">
    @if(Model.Expenses != null) @foreach (var expense in Model.Expenses)
    {
    <li>
        @if (Model.EditId == expense.Id)
        {
        <form class="edit-form" action="/Expenses/EditExpense" method="post">
            <input type="hidden" name="Id" value="@expense.Id"/>
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")"/>
            <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <input type="hidden" name="Offset" value="@Model.Offset"/>
            <input type="hidden" name="Limit" value="@Model.Limit"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate"/>
            <input type="hidden" name="EndDate" value="@Model.EndDate"/>
            <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth"/>
            <input type="hidden" name="SelectedYear" value="@Model.SelectedYear"/>
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            
            <label for="editDate-@expense.Id">Date:</label>
            <input type="date" id="editDate-@expense.Id" name="Date" value="@expense.Date.ToString("yyyy-MM-dd")"/>
            
            <label for="editName-@expense.Id">Name:</label>
            <input type="text" id="editName-@expense.Id" name="Name" value="@expense.Name"/>
            
            <label for="editAmount-@expense.Id">Amount:</label>
            <input type="number" id="editAmount-@expense.Id" step="0.01" name="Amount" value="@expense.Amount"/>

            <div style="grid-column: span 2; display:flex; justify-content: flex-end; gap:.5rem;">
                <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new { EditId = (Guid?)null })" class="clear-filter">Cancel</a>
                <button type="submit">Save</button>
            </div>
        </form>
        <form action="/Expenses/DeleteExpense" method="post">
            <input type="hidden" name="Id" value="@expense.Id"/>
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")"/>
            <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <input type="hidden" name="Offset" value="@Model.Offset"/>
            <input type="hidden" name="Limit" value="@Model.Limit"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate"/>
            <input type="hidden" name="EndDate" value="@Model.EndDate"/>
            <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth"/>
            <input type="hidden" name="SelectedYear" value="@Model.SelectedYear"/>
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            <input type="hidden" name="Date" value="@expense.Date.ToString("yyyy-MM-dd")"/>
            <input type="hidden" name="Name" value="@expense.Name"/>
            <input type="hidden" step="0.01" name="Amount" value="@expense.Amount"/>
            <button class="delete" type="submit">Delete</button>
        </form>
        }
        else
        {
        <span>@expense.Date.ToString("yyyy-MM-dd")</span>
        <span>@expense.Name</span>
        <span>@expense.Amount.ToString("C")</span>
        <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new { EditId = expense.Id })" class="clear-filter">Edit</a>
        }
    </li>
    }
</ul>
}
else
{
<div class="month-controls">
    <div class="month-filter">
        <form method="get" action="/Expenses/Index">
            <label for="month">Month:</label>
            <select name="SelectedMonth">
                @foreach (MonthOfYear m in Model.MonthlyExpenses.FindAll(e => e.Year == (Model.SelectedYear == 0 ? DateTime.Now.Year : Model.SelectedYear)).Select(e => e.MonthOfYear))
                {
                <option value="@((int)m)" @((MonthOfYear)Model.SelectedMonth == m ? "selected" : "")>@m</option>
                }
            </select>

            <label for="year">Year:</label>
            <select name="SelectedYear">
                @foreach (int y in Model.MonthlyExpenses.Select(e => e.Year))
                {
                <option value="@(y)" @(Model.SelectedYear == y ? "selected" : "")>@y</option>
                }
            </select>
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate" />
            <input type="hidden" name="EndDate" value="@Model.EndDate" />
            <input type="hidden" name="OrderBy" value="@Model.OrderBy" />
            <input type="hidden" name="Offset" value="@Model.Offset" />
            <input type="hidden" name="Limit" value="@Model.Limit" />
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <button type="submit">Go</button>
        </form>
    </div>
    <div class="month-navigation">
        @{
        var prevMonth = (Model.SelectedMonth == 0 ? DateTime.Now.Month - 1 : Model.SelectedMonth) - 1;
        var prevYear = (Model.SelectedYear == 0 ? DateTime.Now.Year : Model.SelectedYear);
        if (prevMonth < 1) { prevMonth = 12; prevYear--; }

        var nextMonth = (Model.SelectedMonth == 0 ? DateTime.Now.Month - 1 : Model.SelectedMonth) + 1;
        var nextYear = (Model.SelectedYear == 0 ? DateTime.Now.Year : Model.SelectedYear);
        if (nextMonth > 12) { nextMonth = 1; nextYear++;
        }
        }
        <a href="@Url.GenerateExpenseLink("Expenses","Index", Model, new { SelectedMonth = prevMonth, SelectedYear = prevYear })">Previous</a>
        <a href="@Url.GenerateExpenseLink("Expenses","Index", Model, new { SelectedMonth = nextMonth, SelectedYear = nextYear })">Next</a>
    </div>
</div>
var monthToShow = Model.MonthlyExpenses
.FirstOrDefault(m => m.Year == (Model.SelectedYear == 0 ? DateTime.Now.Year : Model.SelectedYear) &&
m.MonthOfYear == (MonthOfYear)(Model.SelectedMonth == 0 ? DateTime.Now.Month - 1 : Model.SelectedMonth));
if (monthToShow != null)
{
<div class="monthly-expense-header">
    <h2>@monthToShow.MonthOfYear @monthToShow.Year</h2>
    <p><strong>Total:</strong> @monthToShow.TotalSpent.ToString("C")</p>
    <p><strong>Expected Total:</strong> @monthToShow.ExpectedMonthTotal.ToString("C")</p>
</div>
<ul class="expense-list">
    @foreach (var expense in monthToShow.Expenses)
    {
    <li>
        @if (Model.EditId == expense.Id)
        {
        <form class="edit-form" action="/Expenses/EditExpense" method="post">
            <input type="hidden" name="Id" value="@expense.Id"/>
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <input type="hidden" name="Offset" value="@Model.Offset"/>
            <input type="hidden" name="Limit" value="@Model.Limit"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate"/>
            <input type="hidden" name="EndDate" value="@Model.EndDate"/>
            <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
            <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
            
            <label for="editDate-@expense.Id">Date:</label>
            <input type="date" id="editDate-@expense.Id" name="Date" value="@expense.Date.ToString("yyyy-MM-dd")"/>
            
            <label for="editName-@expense.Id">Name:</label>
            <input type="text" id="editName-@expense.Id" name="Name" value="@expense.Name"/>
            
            <label for="editAmount-@expense.Id">Amount:</label>
            <input type="number" id="editAmount-@expense.Id" step="0.01" name="Amount" value="@expense.Amount"/>

            <div style="grid-column: span 2; display:flex; justify-content: flex-end; gap:.5rem;">
                <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new { EditId = (Guid?)null })" class="clear-filter">Cancel</a>
                <button type="submit">Save</button>
            </div>
        </form>
        <form action="/Expenses/DeleteExpense" method="post">
            <input type="hidden" name="Id" value="@expense.Id" />
            <input type="hidden" name="MonthView" value="@(Model.MonthView ? "true" : "false")" />
            <input type="hidden" name="ContinuousView" value="@(Model.ContinuousView ? "true" : "false")"/>
            <input type="hidden" name="OrderBy" value="@Model.OrderBy"/>
            <input type="hidden" name="EditId" value="@Model.EditId"/>
            <input type="hidden" name="Offset" value="@Model.Offset"/>
            <input type="hidden" name="Limit" value="@Model.Limit"/>
            <input type="hidden" name="StartDate" value="@Model.StartDate"/>
            <input type="hidden" name="EndDate" value="@Model.EndDate"/>
            <input type="hidden" name="SelectedMonth" value="@Model.SelectedMonth" />
            <input type="hidden" name="SelectedYear" value="@Model.SelectedYear" />
            <input type="hidden" name="Date" value="@expense.Date.ToString("yyyy-MM-dd")" />
            <input type="hidden" name="Name" value="@expense.Name"/>
            <input type="hidden" step="0.01" name="Amount" value="@expense.Amount" />
            <button class="delete" type="submit">Delete</button>
        </form>
        }
        else
        {
        <span>@expense.Date.ToString("yyyy-MM-dd")</span>
        <span>@expense.Name</span>
        <span>@expense.Amount.ToString("C")</span>
        <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new { EditId = expense.Id })" class="clear-filter">Edit</a>
        }
    </li>
    }

</ul>
}
else
{
<p>No expenses found for @Model.SelectedMonth @Model.SelectedYear.</p>
}
}
}