@using PersonalExpenses.Helpers.Expenses
@using PersonalExpenses.ViewModel
@model PersonalExpenses.ViewModel.ExpensesView
@{
    Layout = "_Layout";
    ViewData["Title"] = "My Expenses";
}

@section Styles {
    <link rel="stylesheet" href="~/css/expenses.css" />
}

@* Success Message *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert-success">@TempData["SuccessMessage"]</div>
}

@* Page Header *@
<div class="page-header">
    <h1 class="page-title">My Expenses</h1>
    @{
        bool isDescending = Model.OrderBy == OrderBy.DateDescending;
        OrderBy nextOrder = isDescending ? OrderBy.DateAscending : OrderBy.DateDescending;
    }
    <a href="@Url.GenerateExpenseLink("Expenses", "Index", Model, new {OrderBy = nextOrder})"
       class="order-button spin @(isDescending ? "desc" : "")" title="Toggle date order">
        <svg viewBox="0 0 24 24">
            <path d="M12 4l-8 8h16l-8-8z" />
        </svg>
    </a>
</div>

@* Date Filters *@
@await Html.PartialAsync("_DateFilters", Model)

@* View Toggle (Continuous vs Fixed) *@
@await Html.PartialAsync("_ContinuousViewToggle", Model)

@* Main Content *@
@if (Model.ContinuousView)
{
    @await Html.PartialAsync("_ContinuousExpenseForm", Model)
    @await Html.PartialAsync("_ContinuousExpenseList", Model)
}
else
{
    @await Html.PartialAsync("_RegularExpenseForm", Model)
    @await Html.PartialAsync("_MonthViewToggle", Model)
    
    @if (Model.MonthView)
    {
        @await Html.PartialAsync("_MonthControls", Model)
        @await Html.PartialAsync("_MonthlyExpenseView", Model)
    }
    else
    {
        @await Html.PartialAsync("_RegularExpenseList", Model)
    }
}

<script src="~/js/expenses.js"></script>